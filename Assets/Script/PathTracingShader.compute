#pragma kernel CSMain
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
//
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float PI = 3.14159265f;
float2 _PixelOffset;
float4 _DirectionalLight;

float2 _Pixel;
float _Seed;

float rand()
{
    float result = frac(sin(_Seed / 100.0f * dot(_Pixel, float2(12.9898f, 78.233f))) * 43758.5453f);
    _Seed += 1.0f;
    return result;
}


struct Sphere
{
    float3 position;
    float radius;
    float3 albedo;
    float metallic;
    float roughness;
    float specular;
    float3 emission;
};
StructuredBuffer<Sphere> _Spheres;

struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
};


Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
   //transform float4(uv, 0.0f, 1.0f) to camera space on near plane
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    direction = direction - float3(0, 0, 0);
    
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
    float3 albedo;
    float metallic;
    float roughness;
    float specular;
    float3 emission;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.albedo = float3(0.0f, 0.0f, 0.0f);
    hit.metallic = 0;
    hit.roughness = 0;
    hit.specular = 0;
    hit.emission = float3(0, 0, 0);
    return hit;
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
    // Calculate distance along the ray where the ground plane is intersected
    float t = -ray.origin.y / ray.direction.y;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
        bestHit.albedo = 0.5f;
        bestHit.metallic = 0.5f;
        bestHit.roughness = 1.0f;
        bestHit.specular = 0.5f;
        bestHit.emission = float3(0, 0, 0);

    }
}


void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere)
{
    // Calculate distance along the ray where the sphere is intersected
    //https://en.wikipedia.org/wiki/Line%E2%80%93sphere_intersection
    float3 d = ray.origin - sphere.position;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
    if (p2sqr < 0)
        return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.position);
        bestHit.albedo = sphere.albedo;
        bestHit.metallic = sphere.metallic;
        bestHit.roughness = sphere.roughness;
        bestHit.specular = sphere.specular;
        bestHit.emission = sphere.emission;
    }
}

//return the roation matrix
float3x3 GetTransformMatrix(float3 normal)
{
    // Choose a helper vector for the cross product
    float3 helper = float3(1, 0, 0);
    if (abs(normal.x) > 0.99f)
        helper = float3(0, 0, 1);

    // Generate vectors
    float3 tangent = normalize(cross(normal, helper));
    float3 binormal = normalize(cross(normal, tangent));
    return float3x3(tangent, binormal, normal);
}

float3 SampleHemisphere(float3 normal, float alpha)
{
    // Sample the hemisphere, where alpha determines the kind of the sampling
    float cosTheta = pow(rand(), 1.0f / (alpha + 1.0f));
    float sinTheta = sqrt(1.0f - cosTheta * cosTheta);
    float phi = 2 * PI * rand();
    float3 tangentSpaceDir = float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);

    // Transform direction to be centered around whatever noraml we need
    return mul(tangentSpaceDir, GetTransformMatrix(normal));
}


RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();
    //IntersectGroundPlane(ray, bestHit);

 

    // Trace spheres
    uint numSpheres, stride;
    _Spheres.GetDimensions(numSpheres, stride);
    for (uint i = 0; i < numSpheres; i++)
        IntersectSphere(ray, bestHit, _Spheres[i]);
    
    return bestHit;
}


//calculate fresnel
void fresnel(const float3 I, const float3 N, const float3 ior, inout float kr)
{
    float cosi = clamp(-1, 1, dot(I, N));
    float etai = 1, etat = ior;
    if (cosi > 0)
    {
        //std::swap(etai, etat);
        float temp = etai;
        etai = etat;
        etat = temp;
    }
    // Compute sini using Snell's law
    float sint = etai / etat * sqrt(max(0.f, 1 - cosi * cosi));
    // Total internal reflection
    if (sint >= 1)
    {
        kr = 1;
    }
    else
    {
        float cost = sqrt(max(0.f, 1 - sint * sint));
        cosi = abs(cosi);
        float Rs = ((etat * cosi) - (etai * cost)) / ((etat * cosi) + (etai * cost));
        float Rp = ((etai * cosi) - (etat * cost)) / ((etai * cosi) + (etat * cost));
        kr = (Rs * Rs + Rp * Rp) / 2;
    }
    // As a consequence of the conservation of energy, transmittance is given by:
    // kt = 1 - kr;
}

float3 fresnelSchlick(float cosTheta, float3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

float DistributionGGX(float3 N, float3 H, float roughness)
{
    float a = roughness * roughness;
    float a2 = a * a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH * NdotH;

    float nom = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r * r) / 8.0;

    float nom = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}
float GeometrySmith(float3 N, float3 V, float3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}

float3 ImportanceSampleGGX(float2 Xi, float3 N, float3 V, float roughness)
{
    float a = roughness * roughness;

    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

    // from spherical coordinates to cartesian coordinates
    float3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;

    // from tangent-space vector to world-space sample vector
    float3 up = abs(N.z) < 0.999 ? float3(0.0, 0.0, 1.0) : float3(1.0, 0.0, 0.0);
    float3 tangent = normalize(cross(up, N));
    float3 bitangent = cross(N, tangent);

    float3 halfVec = tangent * H.x + bitangent * H.y + N * H.z;
    halfVec = normalize(halfVec);
    
    //isosceles
    float3 sampelVec = 2.0 * dot(V, halfVec) * halfVec - V;
    return normalize(sampelVec);

}

float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < 1.#INF)
    {

        float3 reflectionDir;
        float roulette = rand();
        
        float diffuseRatio = 0.5 * (1.0 - hit.metallic);
        float specularRoatio = 1 - diffuseRatio;
        
        if (roulette < diffuseRatio)
        { //sample diffuse
            
            //cosin sample
            reflectionDir = SampleHemisphere(hit.normal, 1.0f);
        }
        else
        { //sample specular
            
            
            //hemisphere sampling
            //reflectionDir = SampleHemisphere(hit.normal, 0.0f);

            //ImportanceSampleGGX
            reflectionDir = ImportanceSampleGGX(float2(rand(), rand()), hit.normal, -ray.direction, hit.roughness);

        }
        
        

        
        float3 V = normalize(-ray.direction);
        float3 L = normalize(reflectionDir);
        float3 H = normalize(V + L);
        
        float NdotL = max(dot(hit.normal, L), 0.0);
        float NdotH = max(dot(hit.normal, H), 0.0);
        float VdotH = max(dot(V, H), 0.0);
        
        float3 F0 = float3(0.08, 0.08, 0.08);
        F0 = lerp(F0 * hit.specular, hit.albedo, hit.metallic);
        
        float NDF = DistributionGGX(hit.normal, H, hit.roughness);
        float G = GeometrySmith(hit.normal, V, L, hit.roughness);
        float3 F = fresnelSchlick(max(dot(H, V), 0.0), F0);
        
        
        float3 kS = F;
        float3 kD = 1.0 - kS;
        kD *= 1.0 - hit.metallic;
        
        //specualr
        //Microfacet specular = D * G * F / (4 * NoL * NoV)
        float3 nominator = NDF * G * F;
        float denominator = 4.0 * max(dot(hit.normal, V), 0.0) * max(dot(hit.normal, L), 0.0) + 0.001;
        float3 specularBrdf = nominator / denominator;
        
        //hemisphere sampling pdf
        //pdf = 1 / (2 * PI)
        //float speccualrPdf = 1 / (2 * PI);
        
        //ImportanceSampleGGX pdf
        //pdf = D * NoH / (4 * VoH)
        float speccualrPdf = NDF * NdotH / (4 * VdotH);
        

        
        //diffuse
        //Lambert diffuse = diffuse / PI
        float3 diffuseBrdf = hit.albedo / PI;
        //cosin sample pdf = N dot L / PI
        float diffusePdf = NdotL / PI;

        float3 totalBrdf = (diffuseBrdf * kD + specularBrdf) * NdotL;
        float totalPdf = diffuseRatio * diffusePdf + specularRoatio * speccualrPdf;
                
        ray.origin = hit.position + hit.normal * 0.001f;
        ray.direction = reflectionDir;
        if (totalPdf > 0.0)
        {
            ray.energy *= totalBrdf / totalPdf;
        }
     
        
    
        
        return hit.emission;
    }
    else
    {
        // Erase the ray's energy - the sky doesn't reflect anything
        ray.energy = 0.0f;

        // Sample the skybox and write it
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz * 1.8f;
    }
}



[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);
    // Transform pixel to [-1,1] range
    float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);
    // Get a ray for the UVs
    Ray ray = CreateCameraRay(uv);
    
    _Pixel = id.xy;
    // Trace and shade
    float3 result = float3(0, 0, 0);
    for (int i = 0; i < 8; i++)
    { //tracing 8 bounces
        RayHit hit = Trace(ray);
        result += ray.energy * Shade(ray, hit);

        if (!any(ray.energy))
            break;
    }
    
    Result[id.xy] = float4(result, 1);

}